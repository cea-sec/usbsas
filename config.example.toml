# usbsas configuration file


# Directory where temp tar and fs will be stored. (Mandatory)
out_directory = "/tmp/"

# Environment variables to keep when forking children processes. (Optional)
# (These are kept by default if none are specified)
#env_vars = ["TERM",
#            "LANG",
#            "KRB5CCNAME",
#            "PATH",
#            "RUST_LOG",
#            "RUST_BACKTRACE",
#            "USBSAS_MOCK_IN_DEV",
#            "USBSAS_MOCK_OUT_DEV"]


# Destination "network". (Optional)
# Upload copied files (in a tar) to a remote network.
# description, longdescr and url are mandatory, krb_service_name is optional.
# If krb_service_name is specified, mutual HTTP authentication with Kerberos
# will be performed with the remote server prior to upload.

# [[networks]]
# description = "Network XXX"
# longdescr = "Send files on network XXX"
# url = "http://127.0.0.1:8042/api/uploadbundle"
# krb_service_name = "HTTP@your.domain"

# [[networks]]
# description = "Network YYY"
# longdescr = "Send files on network YYY"
# url = "http://127.0.0.1:8043/api/uploadbundle"
# krb_service_name = "HTTP@your.domain"


# Source "network". (Optional)
# Download a bundle from a remote network, to write it to an USB device.
# description, longdescr and url are mandatory, krb_service_name is optional.
# If krb_service_name is specified, mutual HTTP authentication with Kerberos
# will be performed with the remote server prior to downupload.
#[source_network]
#description = "Source Network XXX"
#longdescr = "Export files from network XXX"
#url = "http://127.0.0.1:8042/api/downloadbundle"
#krb_service_name = "HTTP@your.domain"


# Destination "command". (Optional)
# Execute a command.
# "%SOURCE_FILE%" in command_args will be replaced with the filename of the
# output tar before execution.
[command]
description = "Save files on disk"
longdescr = "Save out tar in /usbsas_data/"
command_bin = "/bin/cp"
command_args = [
    "%SOURCE_FILE%",
    "/usbsas_data/"
]


# Remote analyzer server. (Optional)
# Like for network destination below, kerberos authentication can be enabled.
# An analyzer report can optionally be written on the destination device.
# Analyzing files can be enabled/disabled based on destination (usb, net (upload)
# or cmd (command), analysis only happens if source is usb.
[analyzer]
url = "http://127.0.0.1:8042/api/scanbundle"
#krb_service_name = "HTTP@your.domain"
analyze_usb = true
analyze_net = true
analyze_cmd = true


# Command to execute after a transfer. (Optional)
# %SOURCE_FILE% is either a tar archive if destination is a network or the
# filesystem of the USB destination.
#[post_copy]
#description = "Archive transfer"
#command_bin = "/bin/cp"
#command_args = [
#	"%SOURCE_FILE%",
#	"/usbsas_archive/"
#]


# USB ports allowed. (Optional)
# Enforce USB topology for source and destination USB devices.
# [4, 3] means: device should be plugged into Port 3 of Bus 4.
# [3, 2, 5] means: There is a USB hub in the Port 2 of Bus 3 and the device
#                  should be plugged into the Port 5 of the hub.
# There can be more than 1 hub (e.g. [2, 3, 1, 2]).
# To check your topology: $ lsusb -t
# Multiple ports can be allowed.
#[usb_port_accesses]
#ports_src = [ [6, 2, 3, 1], [2, 3] ]
#ports_dst = [ [4, 3] ]

# A transfer report can be written on the destination device. (Optional)
# It can also be written on the local disk. (Optional)
[report]
write_dest = true
#write_local = "/var/lib/usbsas/reports"

# Message to show on web page if using web client/server. (Optional)
# Message can be in HTML.
#message="<strong>Under maintenance</strong>"

# Web page title
#web_title="USBSAS"

# Filename filters. (Optional)
# They should be written in lower case as their are tested case insensitive.
# A file is filtered if a filter matches.
# A filter matches if each of its components (contain/start/end) matches
# A component matches if:
# - contain: every strings in the filter are present in the filename
# - start: the filenames startswith the string
# - end: the filenames endswith the string
[[filters]]
contain = ["__macosx"]

[[filters]]
contain = [".ds_store"]

[[filters]]
contain = [".lnk."]

[[filters]]
contain = [".lnk/"]

[[filters]]
end = ".lnk"

[[filters]]
contain = ["autorun.inf"]

[[filters]]
contain = ["thumbs.db"]
